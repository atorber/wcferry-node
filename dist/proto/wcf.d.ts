/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: wcf.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export declare namespace wcf {
    enum Functions {
        FUNC_RESERVED = 0,
        FUNC_IS_LOGIN = 1,
        FUNC_GET_SELF_WXID = 16,
        FUNC_GET_MSG_TYPES = 17,
        FUNC_GET_CONTACTS = 18,
        FUNC_GET_DB_NAMES = 19,
        FUNC_GET_DB_TABLES = 20,
        FUNC_GET_USER_INFO = 21,
        FUNC_GET_AUDIO_MSG = 22,
        FUNC_SEND_TXT = 32,
        FUNC_SEND_IMG = 33,
        FUNC_SEND_FILE = 34,
        FUNC_SEND_XML = 35,
        FUNC_SEND_EMOTION = 36,
        FUNC_SEND_RICH_TXT = 37,
        FUNC_SEND_PAT_MSG = 38,
        FUNC_FORWARD_MSG = 39,
        FUNC_ENABLE_RECV_TXT = 48,
        FUNC_DISABLE_RECV_TXT = 64,
        FUNC_EXEC_DB_QUERY = 80,
        FUNC_ACCEPT_FRIEND = 81,
        FUNC_RECV_TRANSFER = 82,
        FUNC_REFRESH_PYQ = 83,
        FUNC_DOWNLOAD_ATTACH = 84,
        FUNC_GET_CONTACT_INFO = 85,
        FUNC_REVOKE_MSG = 86,
        FUNC_REFRESH_QRCODE = 87,
        FUNC_DECRYPT_IMAGE = 96,
        FUNC_EXEC_OCR = 97,
        FUNC_ADD_ROOM_MEMBERS = 112,
        FUNC_DEL_ROOM_MEMBERS = 113,
        FUNC_INV_ROOM_MEMBERS = 114
    }
    class Request extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            func?: Functions;
        } & (({
            empty?: Empty;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: string;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: TextMsg;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: PathMsg;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: DbQuery;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: Verification;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: MemberMgmt;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: XmlMsg;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: DecPath;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: Transfer;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: string;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: boolean;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: AttachMsg;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: AudioMsg;
            rt?: never;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: RichText;
            pm?: never;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: PatMsg;
            fm?: never;
        } | {
            empty?: never;
            str?: never;
            txt?: never;
            file?: never;
            query?: never;
            v?: never;
            m?: never;
            xml?: never;
            dec?: never;
            tf?: never;
            ui64?: never;
            flag?: never;
            att?: never;
            am?: never;
            rt?: never;
            pm?: never;
            fm?: ForwardMsg;
        }))));
        get func(): Functions;
        set func(value: Functions);
        get empty(): Empty;
        set empty(value: Empty);
        get has_empty(): boolean;
        get str(): string;
        set str(value: string);
        get has_str(): boolean;
        get txt(): TextMsg;
        set txt(value: TextMsg);
        get has_txt(): boolean;
        get file(): PathMsg;
        set file(value: PathMsg);
        get has_file(): boolean;
        get query(): DbQuery;
        set query(value: DbQuery);
        get has_query(): boolean;
        get v(): Verification;
        set v(value: Verification);
        get has_v(): boolean;
        get m(): MemberMgmt;
        set m(value: MemberMgmt);
        get has_m(): boolean;
        get xml(): XmlMsg;
        set xml(value: XmlMsg);
        get has_xml(): boolean;
        get dec(): DecPath;
        set dec(value: DecPath);
        get has_dec(): boolean;
        get tf(): Transfer;
        set tf(value: Transfer);
        get has_tf(): boolean;
        get ui64(): string;
        set ui64(value: string);
        get has_ui64(): boolean;
        get flag(): boolean;
        set flag(value: boolean);
        get has_flag(): boolean;
        get att(): AttachMsg;
        set att(value: AttachMsg);
        get has_att(): boolean;
        get am(): AudioMsg;
        set am(value: AudioMsg);
        get has_am(): boolean;
        get rt(): RichText;
        set rt(value: RichText);
        get has_rt(): boolean;
        get pm(): PatMsg;
        set pm(value: PatMsg);
        get has_pm(): boolean;
        get fm(): ForwardMsg;
        set fm(value: ForwardMsg);
        get has_fm(): boolean;
        get msg(): "xml" | "flag" | "str" | "query" | "ui64" | "m" | "fm" | "txt" | "file" | "rt" | "am" | "att" | "dec" | "v" | "tf" | "empty" | "pm" | "none";
        static fromObject(data: {
            func?: Functions;
            empty?: ReturnType<typeof Empty.prototype.toObject>;
            str?: string;
            txt?: ReturnType<typeof TextMsg.prototype.toObject>;
            file?: ReturnType<typeof PathMsg.prototype.toObject>;
            query?: ReturnType<typeof DbQuery.prototype.toObject>;
            v?: ReturnType<typeof Verification.prototype.toObject>;
            m?: ReturnType<typeof MemberMgmt.prototype.toObject>;
            xml?: ReturnType<typeof XmlMsg.prototype.toObject>;
            dec?: ReturnType<typeof DecPath.prototype.toObject>;
            tf?: ReturnType<typeof Transfer.prototype.toObject>;
            ui64?: string;
            flag?: boolean;
            att?: ReturnType<typeof AttachMsg.prototype.toObject>;
            am?: ReturnType<typeof AudioMsg.prototype.toObject>;
            rt?: ReturnType<typeof RichText.prototype.toObject>;
            pm?: ReturnType<typeof PatMsg.prototype.toObject>;
            fm?: ReturnType<typeof ForwardMsg.prototype.toObject>;
        }): Request;
        toObject(): {
            func?: Functions;
            empty?: ReturnType<typeof Empty.prototype.toObject>;
            str?: string;
            txt?: ReturnType<typeof TextMsg.prototype.toObject>;
            file?: ReturnType<typeof PathMsg.prototype.toObject>;
            query?: ReturnType<typeof DbQuery.prototype.toObject>;
            v?: ReturnType<typeof Verification.prototype.toObject>;
            m?: ReturnType<typeof MemberMgmt.prototype.toObject>;
            xml?: ReturnType<typeof XmlMsg.prototype.toObject>;
            dec?: ReturnType<typeof DecPath.prototype.toObject>;
            tf?: ReturnType<typeof Transfer.prototype.toObject>;
            ui64?: string;
            flag?: boolean;
            att?: ReturnType<typeof AttachMsg.prototype.toObject>;
            am?: ReturnType<typeof AudioMsg.prototype.toObject>;
            rt?: ReturnType<typeof RichText.prototype.toObject>;
            pm?: ReturnType<typeof PatMsg.prototype.toObject>;
            fm?: ReturnType<typeof ForwardMsg.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Request;
    }
    class Response extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            func?: Functions;
        } & (({
            status?: number;
            str?: never;
            wxmsg?: never;
            types?: never;
            contacts?: never;
            dbs?: never;
            tables?: never;
            rows?: never;
            ui?: never;
            ocr?: never;
        } | {
            status?: never;
            str?: string;
            wxmsg?: never;
            types?: never;
            contacts?: never;
            dbs?: never;
            tables?: never;
            rows?: never;
            ui?: never;
            ocr?: never;
        } | {
            status?: never;
            str?: never;
            wxmsg?: WxMsg;
            types?: never;
            contacts?: never;
            dbs?: never;
            tables?: never;
            rows?: never;
            ui?: never;
            ocr?: never;
        } | {
            status?: never;
            str?: never;
            wxmsg?: never;
            types?: MsgTypes;
            contacts?: never;
            dbs?: never;
            tables?: never;
            rows?: never;
            ui?: never;
            ocr?: never;
        } | {
            status?: never;
            str?: never;
            wxmsg?: never;
            types?: never;
            contacts?: RpcContacts;
            dbs?: never;
            tables?: never;
            rows?: never;
            ui?: never;
            ocr?: never;
        } | {
            status?: never;
            str?: never;
            wxmsg?: never;
            types?: never;
            contacts?: never;
            dbs?: DbNames;
            tables?: never;
            rows?: never;
            ui?: never;
            ocr?: never;
        } | {
            status?: never;
            str?: never;
            wxmsg?: never;
            types?: never;
            contacts?: never;
            dbs?: never;
            tables?: DbTables;
            rows?: never;
            ui?: never;
            ocr?: never;
        } | {
            status?: never;
            str?: never;
            wxmsg?: never;
            types?: never;
            contacts?: never;
            dbs?: never;
            tables?: never;
            rows?: DbRows;
            ui?: never;
            ocr?: never;
        } | {
            status?: never;
            str?: never;
            wxmsg?: never;
            types?: never;
            contacts?: never;
            dbs?: never;
            tables?: never;
            rows?: never;
            ui?: UserInfo;
            ocr?: never;
        } | {
            status?: never;
            str?: never;
            wxmsg?: never;
            types?: never;
            contacts?: never;
            dbs?: never;
            tables?: never;
            rows?: never;
            ui?: never;
            ocr?: OcrMsg;
        }))));
        get func(): Functions;
        set func(value: Functions);
        get status(): number;
        set status(value: number);
        get has_status(): boolean;
        get str(): string;
        set str(value: string);
        get has_str(): boolean;
        get wxmsg(): WxMsg;
        set wxmsg(value: WxMsg);
        get has_wxmsg(): boolean;
        get types(): MsgTypes;
        set types(value: MsgTypes);
        get has_types(): boolean;
        get contacts(): RpcContacts;
        set contacts(value: RpcContacts);
        get has_contacts(): boolean;
        get dbs(): DbNames;
        set dbs(value: DbNames);
        get has_dbs(): boolean;
        get tables(): DbTables;
        set tables(value: DbTables);
        get has_tables(): boolean;
        get rows(): DbRows;
        set rows(value: DbRows);
        get has_rows(): boolean;
        get ui(): UserInfo;
        set ui(value: UserInfo);
        get has_ui(): boolean;
        get ocr(): OcrMsg;
        set ocr(value: OcrMsg);
        get has_ocr(): boolean;
        get msg(): "str" | "status" | "wxmsg" | "types" | "contacts" | "dbs" | "tables" | "rows" | "ui" | "ocr" | "none";
        static fromObject(data: {
            func?: Functions;
            status?: number;
            str?: string;
            wxmsg?: ReturnType<typeof WxMsg.prototype.toObject>;
            types?: ReturnType<typeof MsgTypes.prototype.toObject>;
            contacts?: ReturnType<typeof RpcContacts.prototype.toObject>;
            dbs?: ReturnType<typeof DbNames.prototype.toObject>;
            tables?: ReturnType<typeof DbTables.prototype.toObject>;
            rows?: ReturnType<typeof DbRows.prototype.toObject>;
            ui?: ReturnType<typeof UserInfo.prototype.toObject>;
            ocr?: ReturnType<typeof OcrMsg.prototype.toObject>;
        }): Response;
        toObject(): {
            func?: Functions;
            status?: number;
            str?: string;
            wxmsg?: ReturnType<typeof WxMsg.prototype.toObject>;
            types?: ReturnType<typeof MsgTypes.prototype.toObject>;
            contacts?: ReturnType<typeof RpcContacts.prototype.toObject>;
            dbs?: ReturnType<typeof DbNames.prototype.toObject>;
            tables?: ReturnType<typeof DbTables.prototype.toObject>;
            rows?: ReturnType<typeof DbRows.prototype.toObject>;
            ui?: ReturnType<typeof UserInfo.prototype.toObject>;
            ocr?: ReturnType<typeof OcrMsg.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Response;
    }
    class Empty extends pb_1.Message {
        #private;
        constructor(data?: any[] | {});
        static fromObject(data: {}): Empty;
        toObject(): {};
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Empty;
    }
    class WxMsg extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            is_self?: boolean;
            is_group?: boolean;
            id?: string;
            type?: number;
            ts?: number;
            roomid?: string;
            content?: string;
            sender?: string;
            sign?: string;
            thumb?: string;
            extra?: string;
            xml?: string;
        });
        get is_self(): boolean;
        set is_self(value: boolean);
        get is_group(): boolean;
        set is_group(value: boolean);
        get id(): string;
        set id(value: string);
        get type(): number;
        set type(value: number);
        get ts(): number;
        set ts(value: number);
        get roomid(): string;
        set roomid(value: string);
        get content(): string;
        set content(value: string);
        get sender(): string;
        set sender(value: string);
        get sign(): string;
        set sign(value: string);
        get thumb(): string;
        set thumb(value: string);
        get extra(): string;
        set extra(value: string);
        get xml(): string;
        set xml(value: string);
        static fromObject(data: {
            is_self?: boolean;
            is_group?: boolean;
            id?: string;
            type?: number;
            ts?: number;
            roomid?: string;
            content?: string;
            sender?: string;
            sign?: string;
            thumb?: string;
            extra?: string;
            xml?: string;
        }): WxMsg;
        toObject(): {
            is_self?: boolean;
            is_group?: boolean;
            id?: string;
            type?: number;
            ts?: number;
            roomid?: string;
            content?: string;
            sender?: string;
            sign?: string;
            thumb?: string;
            extra?: string;
            xml?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WxMsg;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): WxMsg;
    }
    class TextMsg extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            msg?: string;
            receiver?: string;
            aters?: string;
        });
        get msg(): string;
        set msg(value: string);
        get receiver(): string;
        set receiver(value: string);
        get aters(): string;
        set aters(value: string);
        static fromObject(data: {
            msg?: string;
            receiver?: string;
            aters?: string;
        }): TextMsg;
        toObject(): {
            msg?: string;
            receiver?: string;
            aters?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TextMsg;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): TextMsg;
    }
    class PathMsg extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            path?: string;
            receiver?: string;
        });
        get path(): string;
        set path(value: string);
        get receiver(): string;
        set receiver(value: string);
        static fromObject(data: {
            path?: string;
            receiver?: string;
        }): PathMsg;
        toObject(): {
            path?: string;
            receiver?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PathMsg;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): PathMsg;
    }
    class XmlMsg extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            receiver?: string;
            content?: string;
            path?: string;
            type?: number;
        });
        get receiver(): string;
        set receiver(value: string);
        get content(): string;
        set content(value: string);
        get path(): string;
        set path(value: string);
        get type(): number;
        set type(value: number);
        static fromObject(data: {
            receiver?: string;
            content?: string;
            path?: string;
            type?: number;
        }): XmlMsg;
        toObject(): {
            receiver?: string;
            content?: string;
            path?: string;
            type?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): XmlMsg;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): XmlMsg;
    }
    class MsgTypes extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            types?: MsgTypes.Types[];
        });
        get types(): MsgTypes.Types[];
        set types(value: MsgTypes.Types[]);
        static fromObject(data: {
            types?: ReturnType<typeof MsgTypes.Types.prototype.toObject>[];
        }): MsgTypes;
        toObject(): {
            types?: ReturnType<typeof MsgTypes.Types.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTypes;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): MsgTypes;
    }
    namespace MsgTypes {
        class Types extends pb_1.Message {
            #private;
            constructor(data?: any[] | {
                code?: number;
                label?: string;
            });
            get code(): number;
            set code(value: number);
            get label(): string;
            set label(value: string);
            static fromObject(data: {
                code?: number;
                label?: string;
            }): Types;
            toObject(): {
                code?: number;
                label?: string;
            };
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Types;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): Types;
        }
    }
    class RpcContact extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            wxid?: string;
            code?: string;
            remark?: string;
            name?: string;
            country?: string;
            province?: string;
            city?: string;
            gender?: number;
        });
        get wxid(): string;
        set wxid(value: string);
        get code(): string;
        set code(value: string);
        get remark(): string;
        set remark(value: string);
        get name(): string;
        set name(value: string);
        get country(): string;
        set country(value: string);
        get province(): string;
        set province(value: string);
        get city(): string;
        set city(value: string);
        get gender(): number;
        set gender(value: number);
        static fromObject(data: {
            wxid?: string;
            code?: string;
            remark?: string;
            name?: string;
            country?: string;
            province?: string;
            city?: string;
            gender?: number;
        }): RpcContact;
        toObject(): {
            wxid?: string;
            code?: string;
            remark?: string;
            name?: string;
            country?: string;
            province?: string;
            city?: string;
            gender?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RpcContact;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): RpcContact;
    }
    class RpcContacts extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            contacts?: RpcContact[];
        });
        get contacts(): RpcContact[];
        set contacts(value: RpcContact[]);
        static fromObject(data: {
            contacts?: ReturnType<typeof RpcContact.prototype.toObject>[];
        }): RpcContacts;
        toObject(): {
            contacts?: ReturnType<typeof RpcContact.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RpcContacts;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): RpcContacts;
    }
    class DbNames extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            names?: string[];
        });
        get names(): string[];
        set names(value: string[]);
        static fromObject(data: {
            names?: string[];
        }): DbNames;
        toObject(): {
            names?: string[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbNames;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): DbNames;
    }
    class DbTable extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            name?: string;
            sql?: string;
        });
        get name(): string;
        set name(value: string);
        get sql(): string;
        set sql(value: string);
        static fromObject(data: {
            name?: string;
            sql?: string;
        }): DbTable;
        toObject(): {
            name?: string;
            sql?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbTable;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): DbTable;
    }
    class DbTables extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            tables?: DbTable[];
        });
        get tables(): DbTable[];
        set tables(value: DbTable[]);
        static fromObject(data: {
            tables?: ReturnType<typeof DbTable.prototype.toObject>[];
        }): DbTables;
        toObject(): {
            tables?: ReturnType<typeof DbTable.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbTables;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): DbTables;
    }
    class DbQuery extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            db?: string;
            sql?: string;
        });
        get db(): string;
        set db(value: string);
        get sql(): string;
        set sql(value: string);
        static fromObject(data: {
            db?: string;
            sql?: string;
        }): DbQuery;
        toObject(): {
            db?: string;
            sql?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbQuery;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): DbQuery;
    }
    class DbField extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            type?: number;
            column?: string;
            content?: Uint8Array;
        });
        get type(): number;
        set type(value: number);
        get column(): string;
        set column(value: string);
        get content(): Uint8Array;
        set content(value: Uint8Array);
        static fromObject(data: {
            type?: number;
            column?: string;
            content?: Uint8Array;
        }): DbField;
        toObject(): {
            type?: number;
            column?: string;
            content?: Uint8Array;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbField;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): DbField;
    }
    class DbRow extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            fields?: DbField[];
        });
        get fields(): DbField[];
        set fields(value: DbField[]);
        static fromObject(data: {
            fields?: ReturnType<typeof DbField.prototype.toObject>[];
        }): DbRow;
        toObject(): {
            fields?: ReturnType<typeof DbField.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbRow;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): DbRow;
    }
    class DbRows extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            rows?: DbRow[];
        });
        get rows(): DbRow[];
        set rows(value: DbRow[]);
        static fromObject(data: {
            rows?: ReturnType<typeof DbRow.prototype.toObject>[];
        }): DbRows;
        toObject(): {
            rows?: ReturnType<typeof DbRow.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbRows;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): DbRows;
    }
    class Verification extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            v3?: string;
            v4?: string;
            scene?: number;
        });
        get v3(): string;
        set v3(value: string);
        get v4(): string;
        set v4(value: string);
        get scene(): number;
        set scene(value: number);
        static fromObject(data: {
            v3?: string;
            v4?: string;
            scene?: number;
        }): Verification;
        toObject(): {
            v3?: string;
            v4?: string;
            scene?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Verification;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Verification;
    }
    class MemberMgmt extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            roomid?: string;
            wxids?: string;
        });
        get roomid(): string;
        set roomid(value: string);
        get wxids(): string;
        set wxids(value: string);
        static fromObject(data: {
            roomid?: string;
            wxids?: string;
        }): MemberMgmt;
        toObject(): {
            roomid?: string;
            wxids?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberMgmt;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): MemberMgmt;
    }
    class UserInfo extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            wxid?: string;
            name?: string;
            mobile?: string;
            home?: string;
        });
        get wxid(): string;
        set wxid(value: string);
        get name(): string;
        set name(value: string);
        get mobile(): string;
        set mobile(value: string);
        get home(): string;
        set home(value: string);
        static fromObject(data: {
            wxid?: string;
            name?: string;
            mobile?: string;
            home?: string;
        }): UserInfo;
        toObject(): {
            wxid?: string;
            name?: string;
            mobile?: string;
            home?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfo;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): UserInfo;
    }
    class DecPath extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            src?: string;
            dst?: string;
        });
        get src(): string;
        set src(value: string);
        get dst(): string;
        set dst(value: string);
        static fromObject(data: {
            src?: string;
            dst?: string;
        }): DecPath;
        toObject(): {
            src?: string;
            dst?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DecPath;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): DecPath;
    }
    class Transfer extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            wxid?: string;
            tfid?: string;
            taid?: string;
        });
        get wxid(): string;
        set wxid(value: string);
        get tfid(): string;
        set tfid(value: string);
        get taid(): string;
        set taid(value: string);
        static fromObject(data: {
            wxid?: string;
            tfid?: string;
            taid?: string;
        }): Transfer;
        toObject(): {
            wxid?: string;
            tfid?: string;
            taid?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transfer;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Transfer;
    }
    class AttachMsg extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            id?: string;
            thumb?: string;
            extra?: string;
        });
        get id(): string;
        set id(value: string);
        get thumb(): string;
        set thumb(value: string);
        get extra(): string;
        set extra(value: string);
        static fromObject(data: {
            id?: string;
            thumb?: string;
            extra?: string;
        }): AttachMsg;
        toObject(): {
            id?: string;
            thumb?: string;
            extra?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AttachMsg;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AttachMsg;
    }
    class AudioMsg extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            id?: string;
            dir?: string;
        });
        get id(): string;
        set id(value: string);
        get dir(): string;
        set dir(value: string);
        static fromObject(data: {
            id?: string;
            dir?: string;
        }): AudioMsg;
        toObject(): {
            id?: string;
            dir?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioMsg;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AudioMsg;
    }
    class RichText extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            name?: string;
            account?: string;
            title?: string;
            digest?: string;
            url?: string;
            thumburl?: string;
            receiver?: string;
        });
        get name(): string;
        set name(value: string);
        get account(): string;
        set account(value: string);
        get title(): string;
        set title(value: string);
        get digest(): string;
        set digest(value: string);
        get url(): string;
        set url(value: string);
        get thumburl(): string;
        set thumburl(value: string);
        get receiver(): string;
        set receiver(value: string);
        static fromObject(data: {
            name?: string;
            account?: string;
            title?: string;
            digest?: string;
            url?: string;
            thumburl?: string;
            receiver?: string;
        }): RichText;
        toObject(): {
            name?: string;
            account?: string;
            title?: string;
            digest?: string;
            url?: string;
            thumburl?: string;
            receiver?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RichText;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): RichText;
    }
    class PatMsg extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            roomid?: string;
            wxid?: string;
        });
        get roomid(): string;
        set roomid(value: string);
        get wxid(): string;
        set wxid(value: string);
        static fromObject(data: {
            roomid?: string;
            wxid?: string;
        }): PatMsg;
        toObject(): {
            roomid?: string;
            wxid?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PatMsg;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): PatMsg;
    }
    class OcrMsg extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            status?: number;
            result?: string;
        });
        get status(): number;
        set status(value: number);
        get result(): string;
        set result(value: string);
        static fromObject(data: {
            status?: number;
            result?: string;
        }): OcrMsg;
        toObject(): {
            status?: number;
            result?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OcrMsg;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): OcrMsg;
    }
    class ForwardMsg extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            id?: string;
            receiver?: string;
        });
        get id(): string;
        set id(value: string);
        get receiver(): string;
        set receiver(value: string);
        static fromObject(data: {
            id?: string;
            receiver?: string;
        }): ForwardMsg;
        toObject(): {
            id?: string;
            receiver?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForwardMsg;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ForwardMsg;
    }
}
