/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: extrabyte.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export declare namespace com.iamteer.wcf {
    class Extra extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            properties?: Extra.Property[];
        });
        get properties(): Extra.Property[];
        set properties(value: Extra.Property[]);
        static fromObject(data: {
            properties?: ReturnType<typeof Extra.Property.prototype.toObject>[];
        }): Extra;
        toObject(): {
            properties?: ReturnType<typeof Extra.Property.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Extra;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Extra;
    }
    namespace Extra {
        enum PropertyKey {
            Field_0 = 0,
            Sign = 2,
            Thumb = 3,
            Extra = 4,
            Xml = 7
        }
        class Property extends pb_1.Message {
            #private;
            constructor(data?: any[] | {
                type?: Extra.PropertyKey;
                value?: string;
            });
            get type(): Extra.PropertyKey;
            set type(value: Extra.PropertyKey);
            get value(): string;
            set value(value: string);
            static fromObject(data: {
                type?: Extra.PropertyKey;
                value?: string;
            }): Property;
            toObject(): {
                type?: Extra.PropertyKey;
                value?: string;
            };
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Property;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): Property;
        }
    }
}
